{"ast":null,"code":"import _classCallCheck from \"/var/www/html/soofi/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/soofi/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/var/www/html/soofi/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/var/www/html/soofi/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/var/www/html/soofi/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/var/www/html/soofi/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport './styles/custom.css'; // import './App.css';\n\nimport Routes from './routes';\nimport Footer from './views/Footer/Footer';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      appName: 'Product',\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    _this.getDataFromDb = function () {\n      fetch(\"/getData\").then(function (data) {\n        return data.json();\n      }).then(function (res) {\n        return _this.setState({\n          data: res.data\n        });\n      });\n    };\n\n    _this.putDataToDB = function (message) {\n      var currentIds = _this.state.data.map(function (data) {\n        return data.id;\n      });\n\n      var idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"/putData\", {\n        id: idToBeAdded,\n        message: message\n      });\n    };\n\n    _this.deleteFromDB = function (idTodelete) {\n      var objIdToDelete = null;\n\n      _this.state.data.forEach(function (dat) {\n        if (dat.id == idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n\n      axios.delete(\"/deleteData\", {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    _this.updateDB = function (idToUpdate, updateToApply) {\n      var objIdToUpdate = null;\n\n      _this.state.data.forEach(function (dat) {\n        if (dat.id == idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n\n      axios.post(\"/updateData\", {\n        id: objIdToUpdate,\n        update: {\n          message: updateToApply\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    value: function componentDidMount() {\n      this.getDataFromDb();\n\n      if (!this.state.intervalIsSet) {// let interval = setInterval(this.getDataFromDb, 1000);\n        // this.setState({ intervalIsSet: interval });\n      }\n    } // never let a process live forever\n    // always kill a process everytime we are done using it\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({\n          intervalIsSet: null\n        });\n      }\n    } // just a note, here, in the front end, we use the id key of our data object\n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify\n    // data base entries\n    // our first get method that uses our backend api to\n    // fetch data from our data base\n\n  }, {\n    key: \"render\",\n    // here is our UI\n    // it is easy to understand their functions when you\n    // see them render into our screen\n    // render() {\n    //   const { data } = this.state;\n    //   return (\n    //     <div>\n    //       <ul>\n    //         {data.length <= 0\n    //           ? \"NO DB ENTRIES YET\"\n    //           : data.map(dat => (\n    //               <li style={{ padding: \"10px\" }} key={data.message}>\n    //                 <span style={{ color: \"gray\" }}> id: </span> {dat.id} <br />\n    //                 <span style={{ color: \"gray\" }}> data: </span>\n    //                 {dat.message}\n    //               </li>\n    //             ))}\n    //       </ul>\n    //       <div style={{ padding: \"10px\" }}>\n    //         <input\n    //           type=\"text\"\n    //           onChange={e => this.setState({ message: e.target.value })}\n    //           placeholder=\"add something in the database\"\n    //           style={{ width: \"200px\" }}\n    //         />\n    //         <button onClick={() => this.putDataToDB(this.state.message)}>\n    //           ADD\n    //         </button>\n    //       </div>\n    //       <div style={{ padding: \"10px\" }}>\n    //         <input\n    //           type=\"text\"\n    //           style={{ width: \"200px\" }}\n    //           onChange={e => this.setState({ idToDelete: e.target.value })}\n    //           placeholder=\"put id of item to delete here\"\n    //         />\n    //         <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n    //           DELETE\n    //         </button>\n    //       </div>\n    //       <div style={{ padding: \"10px\" }}>\n    //         <input\n    //           type=\"text\"\n    //           style={{ width: \"200px\" }}\n    //           onChange={e => this.setState({ idToUpdate: e.target.value })}\n    //           placeholder=\"id of item to update here\"\n    //         />\n    //         <input\n    //           type=\"text\"\n    //           style={{ width: \"200px\" }}\n    //           onChange={e => this.setState({ updateToApply: e.target.value })}\n    //           placeholder=\"put new value of the item here\"\n    //         />\n    //         <button\n    //           onClick={() =>\n    //             this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n    //           }\n    //         >\n    //           UPDATE\n    //         </button>\n    //       </div>\n    //     </div>\n    //   );\n    // }\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"off-canvas-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"off-canvas-wrapper-inner\",\n        \"data-off-canvas-wrapper\": true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"off-canvas-content\",\n        \"data-off-canvas-content\": true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(Routes, {\n        name: this.state.appName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/var/www/html/soofi/client/src/App.js"],"names":["React","Component","axios","Routes","Footer","App","state","appName","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","clearInterval"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,qBAAP,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;IAEMC,G;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE,SADH;AAENC,MAAAA,IAAI,EAAE,EAFA;AAGNC,MAAAA,EAAE,EAAE,CAHE;AAINC,MAAAA,OAAO,EAAE,IAJH;AAKNC,MAAAA,aAAa,EAAE,KALT;AAMNC,MAAAA,UAAU,EAAE,IANN;AAONC,MAAAA,UAAU,EAAE,IAPN;AAQNC,MAAAA,cAAc,EAAE;AARV,K;;UAsCRC,a,GAAgB,YAAM;AACpBC,MAAAA,KAAK,CAAC,UAAD,CAAL,CACGC,IADH,CACQ,UAAAT,IAAI;AAAA,eAAIA,IAAI,CAACU,IAAL,EAAJ;AAAA,OADZ,EAEGD,IAFH,CAEQ,UAAAE,GAAG;AAAA,eAAI,MAAKC,QAAL,CAAc;AAAEZ,UAAAA,IAAI,EAAEW,GAAG,CAACX;AAAZ,SAAd,CAAJ;AAAA,OAFX;AAGD,K;;UAIDa,W,GAAc,UAAAX,OAAO,EAAI;AACvB,UAAIY,UAAU,GAAG,MAAKhB,KAAL,CAAWE,IAAX,CAAgBe,GAAhB,CAAoB,UAAAf,IAAI;AAAA,eAAIA,IAAI,CAACC,EAAT;AAAA,OAAxB,CAAjB;;AACA,UAAIe,WAAW,GAAG,CAAlB;;AACA,aAAOF,UAAU,CAACG,QAAX,CAAoBD,WAApB,CAAP,EAAyC;AACvC,UAAEA,WAAF;AACD;;AACDtB,MAAAA,KAAK,CAACwB,IAAN,CAAW,UAAX,EAAuB;AACrBjB,QAAAA,EAAE,EAAEe,WADiB;AAErBd,QAAAA,OAAO,EAAEA;AAFY,OAAvB;AAID,K;;UAKDiB,Y,GAAe,UAAAC,UAAU,EAAI;AAC3B,UAAIC,aAAa,GAAG,IAApB;;AACA,YAAKvB,KAAL,CAAWE,IAAX,CAAgBsB,OAAhB,CAAwB,UAAAC,GAAG,EAAI;AAC7B,YAAIA,GAAG,CAACtB,EAAJ,IAAUmB,UAAd,EAA0B;AACxBC,UAAAA,aAAa,GAAGE,GAAG,CAACC,GAApB;AACD;AACF,OAJD;;AAMA9B,MAAAA,KAAK,CAAC+B,MAAN,CAAa,aAAb,EAA4B;AAC1BzB,QAAAA,IAAI,EAAE;AACJC,UAAAA,EAAE,EAAEoB;AADA;AADoB,OAA5B;AAKD,K;;UAKDK,Q,GAAW,UAACrB,UAAD,EAAasB,aAAb,EAA+B;AACxC,UAAIC,aAAa,GAAG,IAApB;;AACA,YAAK9B,KAAL,CAAWE,IAAX,CAAgBsB,OAAhB,CAAwB,UAAAC,GAAG,EAAI;AAC7B,YAAIA,GAAG,CAACtB,EAAJ,IAAUI,UAAd,EAA0B;AACxBuB,UAAAA,aAAa,GAAGL,GAAG,CAACC,GAApB;AACD;AACF,OAJD;;AAMA9B,MAAAA,KAAK,CAACwB,IAAN,CAAW,aAAX,EAA0B;AACxBjB,QAAAA,EAAE,EAAE2B,aADoB;AAExBC,QAAAA,MAAM,EAAE;AAAE3B,UAAAA,OAAO,EAAEyB;AAAX;AAFgB,OAA1B;AAID,K;;;;;;;AAhFD;AACA;AACA;wCACoB;AAClB,WAAKpB,aAAL;;AACA,UAAI,CAAC,KAAKT,KAAL,CAAWK,aAAhB,EAA+B,CAC7B;AACA;AACD;AACF,K,CAED;AACA;;;;2CACuB;AACrB,UAAI,KAAKL,KAAL,CAAWK,aAAf,EAA8B;AAC5B2B,QAAAA,aAAa,CAAC,KAAKhC,KAAL,CAAWK,aAAZ,CAAb;AACA,aAAKS,QAAL,CAAc;AAAET,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACD;AACF,K,CAED;AACA;AACA;AACA;AAEA;AACA;;;;AAyDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BAES;AACP,aACE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAK,QAAA,SAAS,EAAC,0BAAf;AAA0C,uCAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAoC,uCAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAE,KAAKL,KAAL,CAAWC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHD,CADF,CADA,CADF;AAWD;;;;EA7KeN,S;;AAgLlB,eAAeI,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport './styles/custom.css';\n// import './App.css';\nimport Routes from './routes';\nimport Footer from './views/Footer/Footer';\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    appName: 'Product',\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      // let interval = setInterval(this.getDataFromDb, 1000);\n      // this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch(\"/getData\")\n      .then(data => data.json())\n      .then(res => this.setState({ data: res.data }));\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  putDataToDB = message => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n    axios.post(\"/putData\", {\n      id: idToBeAdded,\n      message: message\n    });\n  };\n\n\n  // our delete method that uses our backend api\n  // to remove existing database information\n  deleteFromDB = idTodelete => {\n    let objIdToDelete = null;\n    this.state.data.forEach(dat => {\n      if (dat.id == idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete(\"/deleteData\", {\n      data: {\n        id: objIdToDelete\n      }\n    });\n  };\n\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    this.state.data.forEach(dat => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post(\"/updateData\", {\n      id: objIdToUpdate,\n      update: { message: updateToApply }\n    });\n  };\n\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  // render() {\n  //   const { data } = this.state;\n  //   return (\n  //     <div>\n  //       <ul>\n  //         {data.length <= 0\n  //           ? \"NO DB ENTRIES YET\"\n  //           : data.map(dat => (\n  //               <li style={{ padding: \"10px\" }} key={data.message}>\n  //                 <span style={{ color: \"gray\" }}> id: </span> {dat.id} <br />\n  //                 <span style={{ color: \"gray\" }}> data: </span>\n  //                 {dat.message}\n  //               </li>\n  //             ))}\n  //       </ul>\n  //       <div style={{ padding: \"10px\" }}>\n  //         <input\n  //           type=\"text\"\n  //           onChange={e => this.setState({ message: e.target.value })}\n  //           placeholder=\"add something in the database\"\n  //           style={{ width: \"200px\" }}\n  //         />\n  //         <button onClick={() => this.putDataToDB(this.state.message)}>\n  //           ADD\n  //         </button>\n  //       </div>\n  //       <div style={{ padding: \"10px\" }}>\n  //         <input\n  //           type=\"text\"\n  //           style={{ width: \"200px\" }}\n  //           onChange={e => this.setState({ idToDelete: e.target.value })}\n  //           placeholder=\"put id of item to delete here\"\n  //         />\n  //         <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n  //           DELETE\n  //         </button>\n  //       </div>\n  //       <div style={{ padding: \"10px\" }}>\n  //         <input\n  //           type=\"text\"\n  //           style={{ width: \"200px\" }}\n  //           onChange={e => this.setState({ idToUpdate: e.target.value })}\n  //           placeholder=\"id of item to update here\"\n  //         />\n  //         <input\n  //           type=\"text\"\n  //           style={{ width: \"200px\" }}\n  //           onChange={e => this.setState({ updateToApply: e.target.value })}\n  //           placeholder=\"put new value of the item here\"\n  //         />\n  //         <button\n  //           onClick={() =>\n  //             this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n  //           }\n  //         >\n  //           UPDATE\n  //         </button>\n  //       </div>\n  //     </div>\n  //   );\n  // }\n\n  render() {\n    return (\n      <div className=\"off-canvas-wrapper\">\n      <div className=\"off-canvas-wrapper-inner\" data-off-canvas-wrapper>\n        <div className=\"off-canvas-content\" data-off-canvas-content>\n          <Routes name={this.state.appName} />\n          <hr/>\n         <Footer/>\n        </div>\n      </div>\n    </div>\n    );\n  }\n\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}